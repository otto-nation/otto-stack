package env

import (
	"fmt"
	"strings"
	"time"

	"github.com/otto-nation/otto-stack/internal/pkg/cli/handlers/utils"
)

// Generator handles .env file generation
type Generator struct {
	projectName string
	environment string
}

// NewGenerator creates a new env generator
func NewGenerator(projectName, environment string) *Generator {
	return &Generator{
		projectName: projectName,
		environment: environment,
	}
}

// Generate creates environment file content for the specified services
func (g *Generator) Generate(services []string) ([]byte, error) {
	var content strings.Builder

	// Header
	content.WriteString("# Generated by otto-stack\n")
	content.WriteString(fmt.Sprintf("# Project: %s\n", g.projectName))
	content.WriteString(fmt.Sprintf("# Generated on: %s\n", time.Now().Format(time.RFC1123)))
	content.WriteString("#\n")
	content.WriteString("# This file contains environment variables for all configured services.\n")
	content.WriteString("# You can override any of these values by creating a .env.local file.\n\n")

	// Project configuration
	content.WriteString("# ============================================================================\n")
	content.WriteString("# PROJECT CONFIGURATION\n")
	content.WriteString("# ============================================================================\n")
	content.WriteString(fmt.Sprintf("PROJECT_NAME=%s\n", g.projectName))
	content.WriteString(fmt.Sprintf("ENVIRONMENT=%s\n", g.environment))
	content.WriteString(fmt.Sprintf("COMPOSE_PROJECT_NAME=%s\n\n", g.projectName))

	// Service-specific environment variables
	for _, serviceName := range services {
		if err := g.addServiceEnv(&content, serviceName); err != nil {
			return nil, fmt.Errorf("failed to add env for service %s: %w", serviceName, err)
		}
	}

	return []byte(content.String()), nil
}

// addServiceEnv adds environment variables for a specific service
func (g *Generator) addServiceEnv(content *strings.Builder, serviceName string) error {
	serviceConfig, err := utils.NewServiceUtils().LoadServiceConfig(serviceName)
	if err != nil {
		// Skip services that can't be loaded
		return nil
	}

	content.WriteString("# ============================================================================\n")
	fmt.Fprintf(content, "# %s (%s)\n", strings.ToUpper(serviceName), serviceConfig.Description)
	content.WriteString("# ============================================================================\n")

	// Add service-specific environment variables
	switch serviceName {
	case "postgres":
		g.addPostgresEnv(content)
	case "mysql":
		g.addMySQLEnv(content)
	case "redis":
		g.addRedisEnv(content)
	case "kafka-broker":
		g.addKafkaEnv(content)
	case "localstack-core":
		g.addLocalstackEnv(content)
	case "prometheus":
		g.addPrometheusEnv(content)
	case "jaeger":
		g.addJaegerEnv(content)
	default:
		// Generic service env vars
		fmt.Fprintf(content, "# %s configuration\n", strings.ToUpper(serviceName))
	}

	content.WriteString("\n")
	return nil
}

// Service-specific environment variable generators
func (g *Generator) addPostgresEnv(content *strings.Builder) {
	content.WriteString("POSTGRES_HOST=localhost\n")
	content.WriteString("POSTGRES_PORT=5432\n")
	fmt.Fprintf(content, "POSTGRES_DB=%s\n", g.projectName)
	content.WriteString("POSTGRES_USER=postgres\n")
	content.WriteString("POSTGRES_PASSWORD=postgres\n")
	fmt.Fprintf(content, "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/%s\n", g.projectName)
}

func (g *Generator) addMySQLEnv(content *strings.Builder) {
	content.WriteString("MYSQL_HOST=localhost\n")
	content.WriteString("MYSQL_PORT=3306\n")
	fmt.Fprintf(content, "MYSQL_DATABASE=%s\n", g.projectName)
	content.WriteString("MYSQL_USER=mysql\n")
	content.WriteString("MYSQL_PASSWORD=mysql\n")
	content.WriteString("MYSQL_ROOT_PASSWORD=root\n")
	fmt.Fprintf(content, "DATABASE_URL=mysql://mysql:mysql@localhost:3306/%s\n", g.projectName)
}

func (g *Generator) addRedisEnv(content *strings.Builder) {
	content.WriteString("REDIS_HOST=localhost\n")
	content.WriteString("REDIS_PORT=6379\n")
	content.WriteString("REDIS_URL=redis://localhost:6379\n")
}

func (g *Generator) addKafkaEnv(content *strings.Builder) {
	content.WriteString("KAFKA_BOOTSTRAP_SERVERS=localhost:9092\n")
	content.WriteString("KAFKA_BROKER_HOST=localhost\n")
	content.WriteString("KAFKA_BROKER_PORT=9092\n")
	content.WriteString("ZOOKEEPER_HOST=localhost\n")
	content.WriteString("ZOOKEEPER_PORT=2181\n")
}

func (g *Generator) addLocalstackEnv(content *strings.Builder) {
	content.WriteString("LOCALSTACK_ENDPOINT=http://localhost:4566\n")
	content.WriteString("AWS_ENDPOINT_URL=http://localhost:4566\n")
	content.WriteString("AWS_ACCESS_KEY_ID=test\n")
	content.WriteString("AWS_SECRET_ACCESS_KEY=test\n")
	content.WriteString("AWS_DEFAULT_REGION=us-east-1\n")
	content.WriteString("AWS_REGION=us-east-1\n")
}

func (g *Generator) addPrometheusEnv(content *strings.Builder) {
	content.WriteString("PROMETHEUS_HOST=localhost\n")
	content.WriteString("PROMETHEUS_PORT=9090\n")
	content.WriteString("PROMETHEUS_URL=http://localhost:9090\n")
}

func (g *Generator) addJaegerEnv(content *strings.Builder) {
	content.WriteString("JAEGER_HOST=localhost\n")
	content.WriteString("JAEGER_UI_PORT=16686\n")
	content.WriteString("JAEGER_COLLECTOR_PORT=14268\n")
	content.WriteString("JAEGER_UI_URL=http://localhost:16686\n")
	content.WriteString("JAEGER_ENDPOINT=http://localhost:14268/api/traces\n")
	content.WriteString("OTEL_EXPORTER_JAEGER_ENDPOINT=http://localhost:14268/api/traces\n")
}
