name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 2 * * 0"  # Weekly on Sundays at 2 AM UTC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write

jobs:
  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Load configuration
        id: config
        uses: ./.github/actions/load-config

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Install security tools
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run Gosec security scanner
        run: |
          echo "🔍 Running Gosec security scan..."
          GOSEC_CONFIG=".gosec.conf"
          
          if [ -f "$GOSEC_CONFIG" ]; then
            gosec -conf "$GOSEC_CONFIG" -fmt json -out gosec-results.json ./... || true
            gosec -conf "$GOSEC_CONFIG" -fmt text ./... | tee gosec-output.txt || true
          else
            gosec -fmt json -out gosec-results.json ./... || true
            gosec -fmt text ./... | tee gosec-output.txt || true
          fi

      - name: Run vulnerability scanner
        run: |
          echo "🔍 Running vulnerability scan..."
          govulncheck ./... | tee vuln-output.txt || echo "Vulnerability scan completed"

      - name: Determine scan strategy
        id: scan-strategy
        run: |
          echo "🔍 Determining TruffleHog scan strategy..."
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "strategy=diff" >> $GITHUB_OUTPUT
            echo "base=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
            echo "head=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "strategy=filesystem" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            echo "strategy=diff" >> $GITHUB_OUTPUT
            echo "base=${{ github.event.before }}" >> $GITHUB_OUTPUT
            echo "head=${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "strategy=filesystem" >> $GITHUB_OUTPUT
          fi

      - name: Run TruffleHog secrets scanner (diff)
        if: steps.scan-strategy.outputs.strategy == 'diff'
        uses: trufflesecurity/trufflehog@main
        with:
          base: ${{ steps.scan-strategy.outputs.base }}
          head: ${{ steps.scan-strategy.outputs.head }}
          extra_args: --only-verified --fail
        continue-on-error: true

      - name: Run TruffleHog secrets scanner (filesystem)
        if: steps.scan-strategy.outputs.strategy == 'filesystem'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --only-verified --fail
        continue-on-error: true

      - name: Basic security checks
        run: |
          echo "🔍 Running basic security checks..."

          # Check for hardcoded secrets patterns
          if grep -r -E "(password|pwd|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" --include="*.go" . ; then
            echo "⚠️ Potential hardcoded secrets found"
            exit 1
          fi

          # Check for unsafe functions
          if grep -r "unsafe\." --include="*.go" . ; then
            echo "⚠️ Unsafe package usage found - review carefully"
          fi

          # Check for dangerous imports
          go list -json ./... | jq -r '.Imports[]?' | sort | uniq | grep -E "(os/exec)" && echo "⚠️ Found potentially dangerous imports" || echo "✅ Standard imports look safe"

      - name: Security summary
        if: always()
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f gosec-output.txt ]; then
            if grep -q "Issues : 0" gosec-output.txt; then
              echo "✅ **Gosec**: No security issues found" >> $GITHUB_STEP_SUMMARY
            else
              issues=$(grep -c "^\[.*\] - G" gosec-output.txt || echo "0")
              echo "⚠️ **Gosec**: Found $issues security issue(s)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          if [ -f vuln-output.txt ]; then
            if grep -q "No vulnerabilities found" vuln-output.txt; then
              echo "✅ **Vulnerabilities**: No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Vulnerabilities**: Issues detected" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "🔍 **TruffleHog**: Secrets scan completed using ${{ steps.scan-strategy.outputs.strategy }} strategy" >> $GITHUB_STEP_SUMMARY

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: |
            gosec-results.json
            gosec-output.txt
            vuln-output.txt
          retention-days: 30

  advanced-security:
    name: Advanced Security
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'security-deep-scan')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
