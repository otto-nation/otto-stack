name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_release:
        description: "Force create a release (skip conventional commit analysis)"
        required: false
        default: false
        type: boolean
      release_type:
        description: "Type of release to create"
        required: false
        default: "auto"
        type: choice
        options:
          - "auto"
          - "patch"
          - "minor"
          - "major"

permissions:
  contents: write
  pull-requests: write
  packages: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Load configuration
        id: config
        uses: ./.github/actions/load-config

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          install-task: "true"

      - name: Run pre-release tests
        run: |
          echo "🧪 Running pre-release validation..."
          go test -v -race ./...
          go vet ./...
          task build

      - name: Create release
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .github/.release-please-config.json
          manifest-file: .github/.release-please-manifest.json

      - name: Release summary
        if: steps.release.outputs.releases_created
        run: |
          echo "🎉 Release created!"
          echo "Version: ${{ steps.release.outputs.tag_name }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release.outputs.tag_name }}"

  build:
    name: Build & Publish
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.release_created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Load configuration
        id: config
        uses: ./.github/actions/load-config

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          install-task: "true"

      - name: Set build variables
        run: |
          echo "VERSION=${{ needs.release.outputs.version }}" >> $GITHUB_ENV
          echo "TAG_NAME=${{ needs.release.outputs.tag_name }}" >> $GITHUB_ENV
          echo "COMMIT=${GITHUB_SHA::8}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Build all platforms
        run: |
          echo "🔨 Building binaries for all platforms..."
          task build-all

          echo "📦 Built artifacts:"
          ls -la ${{ steps.config.outputs.build-dir }}/

          echo "📏 File sizes:"
          du -h ${{ steps.config.outputs.build-dir }}/*

      - name: Generate checksums
        run: |
          cd ${{ steps.config.outputs.build-dir }}

          # Generate SHA256 checksums
          sha256sum * > checksums.txt
          echo "🔐 Generated checksums:"
          cat checksums.txt

          # Extract specific checksums for Homebrew formula
          echo "📋 Homebrew checksums:"
          echo "darwin-amd64: $(sha256sum *darwin-amd64* | cut -d' ' -f1)"
          echo "darwin-arm64: $(sha256sum *darwin-arm64* | cut -d' ' -f1)"

          # Save checksums as environment variables for later use
          echo "SHA256_DARWIN_AMD64=$(sha256sum *darwin-amd64* | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "SHA256_DARWIN_ARM64=$(sha256sum *darwin-arm64* | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📤 Uploading release assets to ${{ env.TAG_NAME }}"
          gh release upload ${{ env.TAG_NAME }} ${{ steps.config.outputs.build-dir }}/* --clobber

      - name: Calculate source tarball SHA256
        id: source-sha
        run: |
          # Download the source tarball that GitHub creates
          curl -L -o source.tar.gz "https://github.com/${{ github.repository }}/archive/refs/tags/${{ env.TAG_NAME }}.tar.gz"
          SOURCE_SHA256=$(sha256sum source.tar.gz | cut -d' ' -f1)
          echo "SOURCE_SHA256=$SOURCE_SHA256" >> $GITHUB_ENV
          echo "source-sha256=$SOURCE_SHA256" >> $GITHUB_OUTPUT
          echo "📦 Source tarball SHA256: $SOURCE_SHA256"

      - name: Update Homebrew tap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🍺 Updating Homebrew tap..."

          # Clone the tap repository
          git clone https://github.com/otto-nation/homebrew-tap.git tap-repo
          cd tap-repo

          # Create a new branch for the update
          git checkout -b "update-otto-stack-${{ env.VERSION }}"

          # Copy the formula
          mkdir -p Formula
          cp ../Formula/otto-stack.rb Formula/otto-stack.rb

          # Update version and URLs in the formula
          sed -i "s|releases/latest/download|releases/download/${{ env.TAG_NAME }}|g" Formula/otto-stack.rb

          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/otto-stack.rb
          git commit -m "Update otto-stack to ${{ env.VERSION }}"

          # Push branch and create PR
          git push origin "otto-stack-${{ env.VERSION }}"
          gh pr create \
            --title "otto-stack ${{ env.VERSION }}" \
            --body "Automated update for otto-stack release ${{ env.VERSION }}" \
            --head "update-otto-stack-${{ env.VERSION }}" \
            --base main

      - name: Verify release
        run: |
          echo "🔍 Verifying release assets..."
          BUILD_DIR="${{ steps.config.outputs.build-dir }}"
          CLI_BINARY="${{ steps.config.outputs.cli-binary }}"

          cd "$BUILD_DIR"
          sha256sum -c checksums.txt
          echo "✅ All checksums verified!"

          chmod +x "$CLI_BINARY-linux-amd64"
          "./$CLI_BINARY-linux-amd64" version || "./$CLI_BINARY-linux-amd64" --version || echo "✅ Binary executes successfully"

          echo "🐳 Verifying Docker image..."
          docker run --rm ${{ steps.config.outputs.docker-registry }}/${{ github.repository }}:${{ env.VERSION }} version || \
          docker run --rm ${{ steps.config.outputs.docker-registry }}/${{ github.repository }}:${{ env.VERSION }} --version || \
          echo "✅ Docker image runs successfully"

  post-release:
    name: Post-Release
    runs-on: ubuntu-latest
    needs: [release, build]
    if: always() && needs.release.outputs.release_created == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Load configuration
        id: config
        uses: ./.github/actions/load-config

      - name: Check package manager configuration
        id: package-config
        run: |
          if [ -f ".github/config/release-config.yaml" ]; then
            HOMEBREW_ENABLED=$(yq eval '.package_managers.homebrew.enabled' .github/config/release-config.yaml)
            SCOOP_ENABLED=$(yq eval '.package_managers.scoop.enabled' .github/config/release-config.yaml)
            echo "homebrew_enabled=$HOMEBREW_ENABLED" >> $GITHUB_OUTPUT
            echo "scoop_enabled=$SCOOP_ENABLED" >> $GITHUB_OUTPUT
          else
            echo "homebrew_enabled=false" >> $GITHUB_OUTPUT
            echo "scoop_enabled=false" >> $GITHUB_OUTPUT
          fi

      - name: Package manager updates
        run: |
          echo "📦 Package Manager Status:"
          echo "  Homebrew: ${{ steps.package-config.outputs.homebrew_enabled }}"
          echo "  Scoop: ${{ steps.package-config.outputs.scoop_enabled }}"

          if [[ "${{ steps.package-config.outputs.homebrew_enabled }}" == "true" ]]; then
            echo "🍺 Updating Homebrew formula..."
            ./scripts/update-homebrew-formula.sh --version ${{ needs.release.outputs.tag_name }}

            # Check if formula was updated
            if git diff --quiet Formula/otto-stack.rb; then
              echo "ℹ️  No changes to Homebrew formula"
            else
              echo "✅ Homebrew formula updated successfully"
              echo "📝 Formula changes:"
              git diff Formula/otto-stack.rb
            fi
          fi

          if [[ "${{ steps.package-config.outputs.scoop_enabled }}" == "true" ]]; then
            echo "🪣 Scoop manifest update would be triggered here"
          fi

      - name: Release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Binaries**: Built for all platforms" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Docker**: Published to ${{ steps.config.outputs.docker-registry }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Checksums**: Generated and verified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Image](${{ steps.config.outputs.docker-registry }}/${{ github.repository }}:${{ needs.release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "🎉 **Status**: Release completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Status**: Release completed with some issues" >> $GITHUB_STEP_SUMMARY
            echo "Build Status: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          fi

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [release, build, post-release]
    if: failure() && needs.release.outputs.release_created == 'true'
    steps:
      - name: Failure summary
        run: |
          echo "❌ Release process failed!"
          echo ""
          echo "Release: ${{ needs.release.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Post-Release: ${{ needs.post-release.result }}"
          echo ""
          echo "Please check the workflow logs for details."
