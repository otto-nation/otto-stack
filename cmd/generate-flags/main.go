package main

import (
	"fmt"
	"os"
	"sort"
	"strings"

	"github.com/otto-nation/otto-stack/internal/config"
	pkgConfig "github.com/otto-nation/otto-stack/internal/pkg/config"
	"gopkg.in/yaml.v3"
)

func main() {
	// Load commands.yaml from embedded data
	data := config.EmbeddedCommandsYAML

	var commandConfig pkgConfig.CommandConfig
	if err := yaml.Unmarshal(data, &commandConfig); err != nil {
		fmt.Fprintf(os.Stderr, "Failed to parse commands.yaml: %v\n", err)
		os.Exit(1)
	}

	// Collect all unique flag names
	flagNames := make(map[string]bool)

	// Add global flags
	for flagName := range commandConfig.Global.Flags {
		flagNames[flagName] = true
	}

	// Add command-specific flags
	for _, command := range commandConfig.Commands {
		for flagName := range command.Flags {
			flagNames[flagName] = true
		}
	}

	// Convert to sorted slice
	var flags []string
	for flagName := range flagNames {
		flags = append(flags, flagName)
	}
	sort.Strings(flags)

	// Create output file
	outputPath := "internal/pkg/constants/flags_generated.go"
	file, err := os.Create(outputPath)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to create output file: %v\n", err)
		os.Exit(1)
	}
	defer func() {
		if closeErr := file.Close(); closeErr != nil {
			fmt.Fprintf(os.Stderr, "Failed to close file: %v\n", closeErr)
		}
	}()

	// Generate Go constants
	_, _ = fmt.Fprintln(file, "// Code generated by cmd/generate-flags. DO NOT EDIT.")
	_, _ = fmt.Fprintln(file)
	_, _ = fmt.Fprintln(file, "package constants")
	_, _ = fmt.Fprintln(file)
	_, _ = fmt.Fprintln(file, "// Flag names generated from commands.yaml")
	_, _ = fmt.Fprintln(file, "const (")

	for _, flagName := range flags {
		constName := "Flag" + toPascalCase(flagName)
		_, _ = fmt.Fprintf(file, "\t%s = %q\n", constName, flagName)
	}

	_, _ = fmt.Fprintln(file, ")")

	fmt.Printf("Generated %d flag constants in %s\n", len(flags), outputPath)
}

// toPascalCase converts kebab-case to PascalCase with special handling
func toPascalCase(s string) string {
	// Handle special cases
	switch s {
	case "json":
		return "JSON"
	case "tty":
		return "TTY"
	}

	parts := strings.Split(s, "-")
	for i, part := range parts {
		if len(part) > 0 {
			// Handle special acronyms
			switch strings.ToLower(part) {
			case "json":
				parts[i] = "JSON"
			case "tty":
				parts[i] = "TTY"
			default:
				parts[i] = strings.ToUpper(part[:1]) + strings.ToLower(part[1:])
			}
		}
	}
	return strings.Join(parts, "")
}
